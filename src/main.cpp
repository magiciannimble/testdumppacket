// main.cpp
#include "mem.h"
#include "log.h"
#include "inireader.h"

#include <string>
#include <vector>
#include <memory>
#include <iostream>
#include <condition_variable>

typedef std::vector<unsigned char> RawData;

unsigned short swab16(unsigned short x)
{
  return ((x & 0xff)<<8) | ((x>>8)&0xff);
}

unsigned int swab32(unsigned int x)
{
  return ((x & 0xff)<<24) | ((x & 0xff00)<<8) |
         ((x>>8) & 0xff00) | ((x>>24)&0xff);
}

int main(int argc, char* argv[] )
{
    const size_t size = 256;
    std::unique_ptr<char[]> buf(new char[size]);
    for(size_t i = 0; i < size; i++)
    {
        buf[i] = (char)i;
    }
    core::Log(1, "Packet: %s", core::dumpPacket(buf.get(), size).c_str());
    core::Log(1, "------------------------------------");

    core::IniReader reader("test.ini");

    if (reader.parseError() < 0)
    {
        std::cout << "Can't load 'test.ini'\n";
    }
    else
    {
        std::cout << "Config loaded from 'test.ini': version="
                  << reader.getInteger("protocol", "version", -1) << ", name="
                  << reader.get("user", "name", "UNKNOWN") << ", email="
                  << reader.get("user", "email", "UNKNOWN") << ", pi="
                  << reader.getReal("user", "pi", -1) << ", active="
                  << reader.getBoolean("user", "active", true) << "\n";
    }

    unsigned short data = 256 + 32;
    const size_t buffDataSize = 16;
    std::unique_ptr<char[]> buffData(new char[buffDataSize]);
    std::memset(buffData.get(), 0, buffDataSize);

    unsigned short rdata = swab16(data);
    std::memcpy(buffData.get(), &rdata, sizeof(unsigned short));

    buffData[2] = (unsigned char)(data >> 8) & 0xff;
    buffData[3] = (unsigned char)(data & 0xff);

    core::Log(1, "Packet: %s", core::dumpPacket(buffData.get(), buffDataSize).c_str());

    unsigned short bodysz = buffData[0];
    bodysz <<= 8;
    bodysz |= buffData[1];

    core::Log(1, "bodysz: %d", bodysz);

    bodysz = 0x0d;//buffData[2];
    bodysz <<= 8;
    bodysz |= 0x95;//buffData[3];

    core::Log(1, "bodysz: %d", bodysz);

    bodysz = *((short *)(buffData.get() + 2));
    core::Log(1, "bodysz: %d", bodysz);

    unsigned char datp[] = {0x45, 0x43, 0x4f, 0x5a, 0x59, 0x07, 0x00, 0xe2, 0x00, 0x00, 0x20, 0x45, 0x98, 0x57, 0xa1, 0x00,
                  0x93, 0x01, 0x00, 0x00, 0xde, 0xd5, 0xb3, 0x70, 0x00, 0x30, 0x31, 0x30, 0x33, 0x30, 0x32, 0x30,
                  0x31, 0x30, 0x31, 0x30, 0x34, 0x00, 0x00, 0x02, 0x12, 0x00, 0x29, 0xd0, 0x07, 0x00, 0x00, 0x00,
                  0x19, 0x45, 0x98, 0x57, 0xa5, 0x00, 0x93, 0x01, 0x00, 0x00, 0xde, 0xd5, 0xb3, 0x70, 0xff, 0x30,
                  0x32, 0x30, 0x33, 0x30, 0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x34, 0x18, 0x00, 0x04, 0x00, 0x1d,
                  0x45, 0x98, 0x57, 0xf3, 0x00, 0x9c, 0x01, 0x00, 0x00, 0xde, 0xd5, 0xb3, 0x70, 0x00, 0x30, 0x31,
                  0x30, 0x33, 0x30, 0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
                  0x00, 0x00, 0x25, 0x45, 0x98, 0x57, 0xfc, 0x00, 0x9c, 0x01, 0x00, 0x00, 0xde, 0xd5, 0xb3, 0x70,
                  0xff, 0x30, 0x32, 0x30, 0x33, 0x30, 0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x34, 0x18, 0x00, 0x01,
                  0x00, 0x00, 0x00, 0x29, 0x9d, 0x09, 0x12, 0x00, 0x00, 0x29, 0xf0, 0x0a, 0x00, 0x1d, 0x45, 0x98,
                  0x57, 0xfc, 0x00, 0x9e, 0x01, 0x00, 0x00, 0xde, 0xd5, 0xb3, 0x70, 0x00, 0x30, 0x31, 0x30, 0x33,
                  0x30, 0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00,
                  0x25, 0x45, 0x98, 0x58, 0x04, 0x00, 0x9e, 0x01, 0x00, 0x00, 0xde, 0xd5, 0xb3, 0x70, 0xff, 0x30,
                  0x32, 0x30, 0x33, 0x30, 0x32, 0x30, 0x31, 0x30, 0x31, 0x30, 0x34, 0x18, 0x00, 0x01, 0x00, 0x00,
                  0x00, 0x29, 0xe9, 0x08, 0x12, 0x00, 0x00, 0x29, 0xf0, 0x0a};

    unsigned short datp_size = 234;

    core::Log(1, "Packet: %s", core::dumpPacket(reinterpret_cast<char*>(datp), datp_size).c_str());


    return 0;
}

